<div class="container-fluid " id="post-container">
    <!--投稿画面-->
    <%= form_with(model: @post,local: true,multipart: true) do |f| %>
    <div class="ml-2 mt-2 d-inline-block h3 midashi">写真投稿</div>
    <div class="col-12 col-lg-10 bg-alice border rounded shadow-sm p-3 mx-auto">
      <div class="align-middle" >
        <%= render 'layouts/error_messages', model: f.object %>
      </div>
      <!--タイトル記入フォーム-->
      <div class="form-group field">
        <%= f.label :title, "タイトル" %>
        <%= f.text_field :title, placeholder:"撮影地入れたタイトルを入力しましょう！",class:"col-12 col-lg-6 form-control" %>
      </div>
      <!--説明文記入フォーム-->
      <div class="form-group field">
        <%= f.label :caption, "説明文" %>
        <%= f.text_area :caption, placeholder:"説明文を記入しましょう！",class:"col-12 col-lg-8 form-control" %>
      </div>
      <!--タグ記入フォーム-->
      <div class="form-group field mt-3">
        <%= f.label :name, "タグ（半角スペースで区切ると複数のタグを登録できます" %>
        <%= f.text_field :name, placeholder:"例：自然 動物　など...", class:"col-12 col-lg-6 form-control" %>
      </div>
      <!--投稿写真選択フォーム-->
      <div class="form-group field">
        <%= f.label :post_image, "投稿写真" %>
        <%= f.file_field :post_image, accept: "image/*", class:"form-control-file" %>
      </div>
      <!--プレビュー表示用-->
      <div class="text-center" id="img-prev"></div>
      <!--地図設定画面（モーダル）表示用-->
      <div class="text-right mt-3">
        <button type="button" class="btn btn-lg btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
          撮影地を設定する
        </button>
      </div>
    </div>
    
    <!--撮影地登録用モーダル-->
    <div class="modal fade px-0" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
        <div class="modal-content">
          <!--モーダルのヘッダー-->
          <div class="modal-header">
            <h4 class="modal-title" id="exampleModalCenterTitle">撮影地設定</h4>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <!--モーダル本体-->
          <div class="modal-body">
            <!--地図検索用-->
            <div class="col-12 mt-3 p-2 input-field border rounded-top" id="search-form">
              <label class="font-weight-bold mx-1"><i class="fa-solid fa-map-location-dot fa-2x "></i> 場所検索(地図タップor住所入力)</label>
              <input class="col-12 col-lg-3" type="text" id="address" placeholder="地名・住所を入力">
              <a class="btn btn-success mx-1 my-1" onclick="codeAddress()">地図を検索</a>
              <a id="del" class="btn btn-warning marker-delete right mx-1 my-1" onclick="deleteMarker()">
              <i class="fas fa-map-marker-alt fas-2x mr-1" style="color:red"></i>マーカー削除
              </a>
            </div>
            <!--マップ本体-->
            <div id="map"></div>
              <%= f.fields_for :map, @post.build_map do |map| %>
                <%= map.hidden_field :latitude %>
                <%= map.hidden_field :longitude %>
                <%= map.hidden_field :address %>
              <% end %>
          </div>
          <!--モーダルのフッター-->
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">閉じる</button>
            <div>
              <%= f.submit "投稿する",class:"btn btn-success" %>
            </div>
          </div>
        <% end %>
        </div>
      </div>
    </div>
  </div>


<script>
var marker
var myLatLng
var map
var map_lat
var map_lng
var map_add
var address
var fixaddress

function initMap(){
  
   myLatLng = {lat: 35.68090045006303, lng: 139.76690798417752}
   marker = new google.maps.Marker();
   map_lat = document.getElementById('post_map_latitude')
   map_lng = document.getElementById('post_map_longitude')
   map_add = document.getElementById('post_map_address')
   map = new google.maps.Map(document.getElementById('map'), {
  center: myLatLng,
  zoom: 9,
  streetViewControl: false,
  mapTypeControl: false,
  });

 google.maps.event.addListener(map, 'click', mylistener);



    //クリックしたときの処理
  function mylistener(event){
    //markerの位置を設定
    //event.latLng.lat()でクリックしたところの緯度を取得
    marker.setPosition(new google.maps.LatLng(event.latLng.lat(), event.latLng.lng()));
    //marker設置
    marker.setMap(map);
    map_lat.value = event.latLng.lat();
    map_lng.value = event.latLng.lng();
    console.log(map_lat.value,map_lng.value);
    
    let latLngInput = new google.maps.LatLng(map_lat.value,  map_lng.value);
    // マーカークリック時に住所取得
    geocoder = new google.maps.Geocoder()
    
    geocoder.geocode( { 
    'latLng': latLngInput,
    }, function(results, status) {
    if (status == 'OK') {
      address = results[0].formatted_address;
      fixaddress = address.replace( /........日本、|日本、|〒.........|/g, "");
      map.setCenter(results[0].geometry.location);
      map_result = results[0].geometry.location;
      map_lat.value = map_result.lat();
      map_lng.value = map_result.lng();
      marker.setPosition(new google.maps.LatLng(map_result.lat(), map_result.lng()));
      marker.setMap(map);
    } else {
      alert('該当する結果がありませんでした');
      initMap();
    }
    document.getElementById('post_map_address').value = fixaddress;
    

  });   
    
  }
  
}

function deleteMarker(){
  marker.setMap(null);
  map_lat.value = "";
  map_lng.value = "";
}

function codeAddress(){
  geocoder = new google.maps.Geocoder()
  let inputAddress = document.getElementById('address').value;
  geocoder.geocode( { 
    'address': inputAddress
    }, function(results, status) {
       address = "";
    if (status == 'OK') {
      address = results[0].formatted_address;
      fixaddress = address.replace( /........日本、|日本、|〒.........|/g, "");
      map.setCenter(results[0].geometry.location);
      map_result = results[0].geometry.location;
      map_lat.value = map_result.lat();
      map_lng.value = map_result.lng();
      marker.setPosition(new google.maps.LatLng(map_result.lat(), map_result.lng()));
      marker.setMap(map);
      console.log(map_lat.value,map_lng.value);
      console.log(fixaddress);
    } else {
      alert('該当する結果がありませんでした');
      initMap();
    }
    document.getElementById('post_map_address').value = fixaddress;
  });   
}

// プレビュー画像表示用
  document.addEventListener('DOMContentLoaded', () => {
      const createImageHTML = (blob) => {  
      const imageElement = document.getElementById('img-prev'); 
      const blobImage = document.createElement('img'); 
      blobImage.setAttribute('class', 'new-postimg');
      blobImage.setAttribute('src', blob); 
      imageElement.appendChild(blobImage);
    }; 
    document.getElementById('post_post_image').addEventListener('change', (e) =>{
      const imageContent = document.querySelector('img'); 
      if (imageContent){ 
        imageContent.remove(); 
      }
      
      const file = e.target.files[0];  
      const blob = window.URL.createObjectURL(file); 
      createImageHTML(blob); 
    });
  });

</script>
